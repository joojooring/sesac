<!DOCTYPE html>
<html lang="ko">
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>동적 form 전송</title>
    <!-- 아래 cdn은 axios를 위한 cdn -->
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
    <!-- 아래 cdn은 ajax 겸 JQUERY 위한 cdn  -->
    <script src="https://code.jquery.com/jquery-3.7.1.min.js" integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo=" crossorigin="anonymous"></script>
  </head>
  <body>
    <!-- action은 폼을 제출했을 때 일어나는 과정이라 동적 폼 전송엔 필요하지 않음 -->
    <form name="register">
      <input type="text" name="id" placeholder="ID" value="joojooring" pattern="^[a-z0-9]{5,}$"  title="소문자, 숫자를 이용하여 5글자 이상" required>
      <input type="password" name="pw" placeholder="password" value="1234">
      <input type="text" name="name" placeholder="이름" value="쥬쥬밥" required>
      <div>
        <button type="button" onclick="ajaxGet()"> ajax get 전송</button>
        <button type="button" onclick="ajaxPost()"> ajax post 전송</button>
        <button type="button" onclick="axiosGET()"> axios get 전송</button>
        <button type="button" onclick="axiosPOST()"> axios post 전송</button>
        <br />
        <button type="button" onclick="fetchGet()"> fetch GET 전송</button>
        <button type="button" onclick="fetchPost()"> post 전송</button>


      </div>
      <!-- 아래 두 줄은 동기통신에서 일반 폼 전송시 씀 -->
      <!-- <input type = "submit" /> -->
      <!-- <button type="submit">제출</button> -->
      
      <!-- 동적 FORM전송에서는 아래 코드 -->
      <!-- <button type= "button" onclick = "함수()" -->
        
    </form>
    <h3 id="result"></h3>


    <script>
      function getData() {
        const form = document.forms["register"];


        //폼 안에 정규성 검사(유효성검사)를 해서 boolean값 반환 함수 checkValidity
        // bullean값 앞에 !를 시키면 반전시켜서 true면 false로 false면 true
        if (!form.checkValidity()) {

          //유효성검사를 통과하지 못한 (false가 된 input을 ) input에 대해 
          form.reportValidity();
          return false;
        }
        //!!!!!!!!!!!!!!!!! 함수는 return을 만나면 다음 코드를 읽지 않음!!!!!!!!!!!!!!!!!!!!!!!!!

        // getData라는 함수의 반환값은 총 2가지 형태
        // 하나는 false
        // 하나는 object(객체형태)


        const data = {
          id: form.id.value,
          pw: form.pw.value,
          name: form.name.value
        }

        return data
      }
      // ajax는 jquery가 있어서 사용 가능
      // function ajaxGet(){
      //     const form = document.forms["register"]
      //     console.log(form);
      //     console.dir(form.id.value);

      //     const data = {
      //         id: form.id.value,
      //         pw: form.pw.value,
      //         name: form.name.value
      //     }
      //     $.ajax({
      //         type : "GET", // 폼 속성 중 method
      //         // url : `/ajax?id=${data.id}&pw=${data.pw}&name=${data.name}`,
      //         url: "/ajax", // 폼 속성 중 action
      //         data: data,
      //         success: function(result){ //응답을 성공적으로 받았을 경우에 대한 이벤트핸들러
      //             //매개변수(result)에 응답이 들어옴

      //             console.log(result);
      //             const {name} = result ; //객체 구조분해하면 편하게 사용 가능
      //             $("#result").html(`ajax get 요청 성공 ${name} 환영합니다.`)
      //         }
      //     })
      // }
      // function ajaxPost(){
      //     const form = document.forms["register"]
      //     console.log(form);
      //     console.dir(form.id.value);

      //     const data = {
      //         id: form.id.value,
      //         pw: form.pw.value,
      //         name: form.name.value
      //     }
      //     $.ajax({
      //         type : "POST", // 폼 속성 중 method
      //         url: "/ajax", // 폼 속성 중 action
      //         data: data,
      //         success: function(result){ //응답을 성공적으로 받았을 경우에 대한 이벤트핸들러
      //             //매개변수(result)에 응답이 들어옴
      //             console.log(result);
      //             $("#result").html(`ajax post 요청 성공 ${result.name} 환영합니다.`)
      //         }
      //     })

      // }

      function axiosGET() {
        const data = getData();

        // axios 함수는 promise 객체를 return함
        // 그래서 .then async await 사용 가능

        axios({
          method: "GET",
          url: "/axios",
          params: data //GET요청일 경우 data를 params에 담아주면 됨
          //parmas 대신 url에 query를 직접 작성해도 됨
          // url : `/axios?id=${data.id}&pw=${data.pw}&name=${data.name}`,


        }).then((res) => {
          //서버에서 보내준 응답이 res에 담김
          console.log("res", res)
          console.log("res.data", res.data)
          const {
            name
          } = res.data

          $("#result").html(`axios get 요청 성공 ${name}님 환영합니다.`)
        })
      }


      // function axiosPOST() {
      //   const data = getData();
      //   axios({
      //       method: "POST",
      //       url:"/axios",
      //       data: data
      //   }).then((res)=>{
      //       console.log(res.data);
      //       const {
      //       name
      //     } = res.data

      //     $("#result").html(`axios post 요청 성공 ${name}님 환영합니다.`)
      //   })
      // }

      async function axiosPOST() {
       // 동적 폼 전송히고 있는데
        // 폼 유효성 검사도 하고 싶음.
        // 폼 유효성 검사를 input 태그의 pattern, minlength, required 등의 속성을 이용하여 하고 싶음

        // input 태그의 pattern, minlength, required 이 속성은 form의 "submit" 이 일어날 때 동작함.
        // 동적 폼 전송은 form 의 "submit" 을 이용하는 게 아님.
        // 따라서, javascript 코드 내에서 폼 유효성 검사를 하는 코드를 작성해야함.
        // 방법 1)
        // const regex = /^[a-z0-9]{5,}$/
        // regex.test(form.id.value)
        // 방법 2)
        // form.checkVaildity()와 form.reportVaildity() 를 이용해서 input에 작성된 유효성을 검증
      
        const data = getData();
        // data에 받아오는 값은 두가지 형태 중 하나
        // false or objec(객체형태)
        if (!data) return;

        const res = await axios({
          method: "POST",
          url: "/axios",
          data: data // post일 경우 서버에 데이터를 보낼 때, data에 key를 담아서 보내면 됨

        }).then((res) => {
          console.log(res.data);
          const {
            name
          } = res.data

          $("#result").html(`axios post 요청 성공 ${name}님 환영합니다.`)
        })
      }

      function fetchGet(){
        const data = getData();
        if(!data) return;

        //fetch(url, option객체)
        //url 은 action을 의미
        //Option 객체에 method가 있음,
        // fetch는 method 기본값이 get이라 get으로 할거면 안보내도 됨
        // fetch는 get 요청시 data는 query로 만들어서 url과 함께 전송해야 됨

        // const urlQuery = `id=${data.id}&name=${data.name}&pw=${data.pw}`
        
        const urlQuery = new URLSearchParams(data).toString();



      //  방법 1) promise를 이용해 .then chaing
        fetch(`/fetch?${urlQuery}`)
        .then((res)=>{
          console.log("원본 : ",res)
          //json으() 메소드를 이용해서 parsing 해야됨
          // json() promise기반이라 동작시키는데 시간이 걸림
          // const data = res.json(); // Promise pending 상태로 undefined(문제발생)
          return res.json()
        }).then((res)=>{
          //위에서 파싱해서 return하고 있기 때문에,
          // 이 함수의 res는 서버에서 내가 응답한 객체가 나오게 됨

          console.log("파씽 :",res)
        })
      }

      // 방법 2) 반만 async await
        // fetch(`/fetch?${urlQuery}`, {
        //   method: "GET"
        // }).then(async (res)=>{
        //   console.log("원본", res);
        //   console.log("passing : ", await res.json());
          //응답에서 알아둬야 될 것
          //응답을 passing해야됨  응답객체에서 제공하는 메소드 .json() .text()


      //   })
      // }

      //빙법 3)async await
      function fetchGet(){
        const data = getData();
        if(!data) return;

      const oriRes = await fetch (`/fetch?${urlQuery}`)
      const res = await.json()
          console.log(res)
      }


      function fetchPost(){
        const data = getData();
        if(!data) return;

        //기존엔 폼 제출시 형태가 원래는 기본값으로: application/ x-www-form-urlencoded형태로 했는데
        //하지만 fetch로 post 요청시엔 content 타입을 바꿔줘야 됨
        //fetch로 post 요청시 기본값 사용시 동작을 안함
        //그래서 content type을 application/json 형태로 바꿔줘야 됨
        
        fetch("/fetch",{method: "POST",
                      headers: {"Content-Type" : "application/json"},
                      body : JSON.stringify(data)}) //JSON.stringify : data객체(js)를 json형태로 변경하는거
        .then((res)=>{
          return res.json()
        }).then((res)=>{
          console.log(res)
          $("#result").html(`fetch post 요청 성공 ${res.name}님 환영합니다!!`)
        })
      }
    
    </script>

  </body>
</html>