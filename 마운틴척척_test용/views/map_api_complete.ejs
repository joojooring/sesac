<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8" />
    <title>다음 지도 API</title>
    <!-- Bootstrap CDN -->
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css"
      rel="stylesheet"
      integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9"
      crossorigin="anonymous"
    />
    <!-- Bootstrap icon CDN -->
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.7.1/font/bootstrap-icons.css"
    />
    <!-- jQuery CDN -->
    <script
      src="https://code.jquery.com/jquery-3.7.1.min.js"
      integrity="sha256-/JqT3SQfawRcv/BIHPThkBvs0OEvtFFmqPF/lYI/Cxo="
      crossorigin="anonymous"
    ></script>
    <link rel="stylesheet" href="../static/map.css" />

    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+KR:wght@100;200;300;400;500;600;700&family=Unbounded:wght@200;300;400;500;600;700;800;900&display=swap" rel="stylesheet">
  </head>

  <body>
    <%-include("navbar.ejs")%>

    <!-- 카카오맵 API 지도 -->
    <div id="map">
      <button
        class="btn-top-myplace comment-btn"
        type="button"
        onclick="panTo()"
      >
        내 위치
      </button>
    </div>

    <script src="//dapi.kakao.com/v2/maps/sdk.js?appkey=ac0bc7a26540e561b08d22a29e4ac4d6&libraries=services"></script>
    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>

    <script>
      var mapContainer = document.getElementById("map");
      var mapOption = {
        center: new kakao.maps.LatLng(37.53369071500842, 126.96329157378412),
        level: 4,
        mapTypeId: kakao.maps.MapTypeId.ROADMAP,
      };
      var map = new kakao.maps.Map(mapContainer, mapOption);

      var markerPosition = new kakao.maps.LatLng(
        37.53369071500842,
        126.96329157378412
      );
      var marker = new kakao.maps.Marker({
        position: markerPosition,
      });
      marker.setMap(map);

      var iwContent = '<div style="padding:5px;">내위치!</div>',
        iwPosition = new kakao.maps.LatLng(
          37.53369071500842,
          126.96329157378412
        ),
        iwRemoveable = true;

      var infowindow = new kakao.maps.InfoWindow({
        map: map, 
        position: iwPosition,
        content: iwContent,
        removable: iwRemoveable,
      });

      infowindow.open(map, marker);

      function panTo() {
        var moveLatLon = new kakao.maps.LatLng(
          37.53369071500842,
          126.96329157378412
        );
        map.panTo(moveLatLon);
      }

      // axios를 사용하여 "/gallery/mapexhibition" URL에 GET 요청을 보냅니다.
      // 응답 데이터를 받아 markExhibition() 함수에 전달합니다.
      function getMap() {
        axios({
          method: "GET",
          url: "/gallery/mapexhibition",
        }).then((res) => {
          markExhibition(res.data);
        });
      }
      getMap();



      // positions 배열의 각 요소에 대해 geocodeAddress() 함수를 호출합니다.
      // await를 사용하여 주소를 지오코딩하고, 마커를 생성하는 작업을 비동기적으로 처리합니다.


      // markExhibition() 함수에서 geocodeAddress() 함수를 호출할 때마다 생성되는 마커를 markerArr 배열에 추가합니다. 이렇게 배열로 관리함으로써, 나중에 마커를 제거하거나 다른 작업을 수행할 때 편리하게 접근할 수 있습니다.

      // 마커를 배열로 관리하면 다음과 같은 장점이 있습니다:

      // 여러 개의 마커를 한 번에 제거할 수 있습니다. 예를 들어, 모든 마커를 지도에서 제거하고 싶을 때 배열을 순회하면서 제거할 수 있습니다.
      // 특정 마커를 찾아서 조작할 수 있습니다. 배열의 인덱스를 이용하여 특정 마커를 선택하고 원하는 작업을 수행할 수 있습니다.
      // 마커의 개수나 순서를 파악할 수 있습니다. 배열의 길이를 이용하여 마커의 개수를 확인하거나, 배열의 순서를 이용하여 마커의 순서를 파악할 수 있습니다.

      async function markExhibition(positions) {
        for (var i = 0; i < positions.length; i++) {
          await geocodeAddress(
            positions[i].g_name,
            positions[i].deadline,
            positions[i].website,
            positions[i].detailaddr,
            positions[i].imgurl,
            positions[i].g_id,
            positions[i].address,
            i
          );
        }
      }
      let markerArr = [];



      // detailaddr을 주소로 사용하여 카카오맵의 geocoder를 이용해 좌표를 검색합니다.
      // 좌표를 기반으로 마커를 생성하고, 해당 마커를 markerArr 배열에 추가합니다.
      // 마커를 클릭하면 인포윈도우를 표시하고, 해당 위치를 지도의 중심으로 설정합니다.
      async function geocodeAddress(
        g_name,
        deadline,
        website,
        detailaddr,
        imgurl,
        g_id,
        address,
        i
      ) {
        return new Promise((resolve, reject) => {
          var imageSrc =
            "https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png";






          // 콜백 함수:
          // geocoder.addressSearch() 메서드와 kakao.maps.event.addListener() 메서드에서 콜백 함수가 사용되었습니다.
          // 콜백 함수는 특정 이벤트나 조건이 발생했을 때 호출되는 함수로, 비동기적인 작업을 처리하기 위해 사용됩니다.
          // addressSearch() 메서드의 콜백 함수는 주소 검색 결과를 처리하고, addListener() 메서드의 콜백 함수는 마커 클릭 이벤트를 처리합니다.

          var geocoder = new kakao.maps.services.Geocoder();
          geocoder.addressSearch(detailaddr, function (result, status) {
            if (status === kakao.maps.services.Status.OK) {
              var coords = new kakao.maps.LatLng(result[0].y, result[0].x);
              var imageSize = new kakao.maps.Size(24, 35);
              var markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);

              var marker = new kakao.maps.Marker({
                map: map,
                position: coords,
                image: markerImage, 
                clickable: true,
              });

              markerArr.push(marker);

              var infowindow = new kakao.maps.InfoWindow({
                content: `<label for="myCheckbox">찜하기</label>
                            <input type="checkbox" id="myCheckbox" onchange="changeHeartMarker(this, '${i}','${g_name}'); checkboxIsChecked(this, '${i}', '${g_name}')
                            handleCheckboxChange(this, ${g_id}); heartGalleryRequest(${g_id}); heartUser();"> 
                            <div style="font-weight:bold;">${g_name}<br/>
                            <button type="button" onclick="imgurlAdd('${imgurl}'); info('${g_name}', '${deadline}', '${detailaddr}', '${website}', '${g_id}'); searchComment();">더보기</button>
                            <a href="https://map.kakao.com/link/search/${address}" style="color:blue" target="_blank"><div style="width:400px;text-align:right;padding:10px 0;">길찾기</a></div>`,
                removable: true,
              });
              kakao.maps.event.addListener(
                marker,
                "click",
                makeClickListener(map, marker, infowindow, coords, markerImage)
              );

              resolve(); 
            } else {
              markerArr.push({}); 
              resolve();
            }
          });
        });
      }



      // 마커를 클릭할 때 실행되는 클릭 이벤트 리스너를 생성합니다.
      // 인포윈도우를 열고, 해당 위치를 지도의 중심으로 설정합니다.
      function makeClickListener(map, marker, infowindow, coords, markerImage) {
        return function () {
          infowindow.open(map, marker);
          map.setCenter(coords);
        };
      }



      // 체크박스의 상태에 따라 마커의 이미지를 변경하는 함수입니다.
      // 체크박스가 체크되면 하트 모양의 이미지로 변경하고, 체크가 해제되면 기본 이미지로 변경합니다.
      function changeHeartMarker(objInput, index, g_name) {
        let clickimageSrc = "https://youip.net/images/marker_kakao.png", 
          clickimageSize = new kakao.maps.Size(50, 65), 
          clickimageOption = { offset: new kakao.maps.Point(27, 69) }; 

        let clickmarkerImage = new kakao.maps.MarkerImage(
          clickimageSrc,
          clickimageSize,
          clickimageOption
        );

        let imageSrc =
          "https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/markerStar.png";
        let imageSize = new kakao.maps.Size(24, 35);
        let markerImage = new kakao.maps.MarkerImage(imageSrc, imageSize);

        if (objInput.checked) {
          clickmarkerImage.src = clickimageSrc;
          markerArr[index].setImage(clickmarkerImage);
        } else {
          imageSrc.src = markerImage;
          markerArr[index].setImage(markerImage);
        }
      }



      // 체크박스의 상태 변화를 모니터링하는 함수입니다.
      // 체크박스가 체크되면 해당 위치의 정보를 출력합니다.
    
      function checkboxIsChecked(checkbox, index, g_name) {
        if (checkbox.checked) {
          console.log(`Checkbox ${index}, ${g_name}가 체크되었습니다.`);

          const infoContainer = document.querySelector(".info-container");
          const infoImage = infoContainer.querySelector("#infoImage");
          const result = infoContainer.querySelector("#result");
        } else {
          console.log(`Checkbox ${index}, ${g_name}가 체크 해제되었습니다.`);
        }
      }


      // 이미지 URL을 받아와 infoImage 요소의 src 속성을 변경합니다.
      function imgurlAdd(imgurl) {
        const infoImage = document.getElementById("infoImage");
        infoImage.src = imgurl;
        toggleInfoContainer();
      }


      // 전달받은 정보를 템플릿에 맞게 HTML로 구성하여 출력합니다.
      function info(g_name, deadline, detailaddr, website, g_id) {
        const result = document.getElementById("result");
        result.innerHTML = `
                          <div class="title">${g_name}</div>
                          <div class="deadline">${deadline}</div>
                          <div class="detailaddr">${detailaddr}</div>
                          <div class="website">
                          <a href="${website}" target="_blank">웹사이트</a>                           
                          </div>
                          <div id="galleryId" style="display:none;">${g_id}</div>
                          `;
      }
    </script>
    <!-- 지도 끝 -->

    <div class="container-a">
      <div class="sidebar">
        <div class="toggle-btn btn-a" onclick="toggleSidebar('a')">
          <a href="#"><i class="bi bi-list"></i></a>
        </div>
        <div class="toggle-btn btn-b" onclick="toggleSidebar('b')">
          <a href="#"><i class="bi bi-heart-fill"></i></a>
        </div>
      </div>

      <!-- 리스트 콘텐츠 영역 -->
      <div class="content">
        <div class="content-a">
          <% for(let i=0; i < data.length; i++){ %>
          <img src="<%= data[i].imgurl %>" alt="박물관사진" />
          <p><%=data[i].g_name %></p>
          <hr />
          <br />
          <% } %>
        </div>

        <div class="content-b">찜목록은 로그인 후 사용가능합니다</div>
      </div>

      <script>
        heartUser();

        function heartGalleryRequest(g_id) {
          axios({
            method: "GET",
            url: "/gallery/heartgallery",
            params: {
              g_id: g_id
            },
          }).then((res) => {
          });
        }

        function heartUser() {
          axios({
            method: "GET",
            url: "/gallery/heartuser",
          })
            .then((res) => {
              if (res.data.login == false) {
              } else {
                const data = res.data;

                const contentContainer = document.querySelector(".content-b");
                contentContainer.innerHTML = ""; 
                if (data && data.length > 0) {
                  for (let i = 0; i < data.length; i++) {
                    const img = document.createElement("img");
                    img.src = data[i].imgurl;

                    const p = document.createElement("p");
                    p.textContent = data[i].g_name;

                    const hr = document.createElement("hr");

                    const contentItem = document.createElement("div");
                    contentItem.appendChild(img);
                    contentItem.appendChild(p);
                    contentItem.appendChild(hr);

                    contentContainer.appendChild(contentItem);

                  }
                }
              }
            })
            .catch((error) => {
              console.error("데이터 불러오기 중 오류가 발생했습니다:", error);
            });
        }

        function handleCheckboxChange(checkbox, g_id) {
          const checked = checkbox.checked;
          const data = {
            g_id: g_id,
          };
          
          if (checked) {
            axios({
              method: "POST",
              url: "/gallery/heartlist",
              data: data,
            })
            .then((res) => {
              if (res.data.login == false) {
                alert("로그인 후 사용 가능합니다");
              } else {
                alert("찜 완료!");
              }
              heartUser();
              })
              .catch((error) => {
                console.error("데이터 저장 중 오류가 발생했습니다:", error);
              });
          } else {
            axios({
              method: "DELETE",
              url: `/gallery/heartlist/${g_id}`,
            })
              .then((res) => {
                if (res.data.login == false) {
                  alert("로그인 후 사용 가능합니다");
                } else {
                  alert("찜 삭제!");
                }
                heartUser();
              })
              .catch((error) => {
                console.log(error);
              });
          }
        }
      </script>

      <!-- 정보창을 표시할 영역 -->
      <div class="info-container">
        <img src="" id="infoImage" />
        <div class="info">
          <div id="result-box">
            <div id="result"></div>
            <hr />
          </div>
          <div id="comment" class="comment-container">
            <div class="comment-text">
              <div style="font-weight: bold">방문자 리뷰</div>
              <button
                type="button"
                class="comment-btn"
                onclick="changeComment()"
              >
                리뷰 쓰기
              </button>
            </div>
            <!-- 리뷰 리스트 -->
            <div id="list" class="comment-list"></div>
            <!-- 리뷰 작성 -->
            <div id="write" class="comment-write">
              <p>별점을 표시해 주세요</p>
              <form name="review" class="mb-3" id="myform">
                <fieldset>
                  <input
                    type="radio"
                    name="reviewStar"
                    value="5"
                    id="rate1"
                  /><label for="rate1">★</label>
                  <input
                    type="radio"
                    name="reviewStar"
                    value="4"
                    id="rate2"
                  /><label for="rate2">★</label>
                  <input
                    type="radio"
                    name="reviewStar"
                    value="3"
                    id="rate3"
                  /><label for="rate3">★</label>
                  <input
                    type="radio"
                    name="reviewStar"
                    value="2"
                    id="rate4"
                  /><label for="rate4">★</label>
                  <input
                    type="radio"
                    name="reviewStar"
                    value="1"
                    id="rate5"
                  /><label for="rate5">★</label>
                </fieldset>
                <textarea
                  name="commentText"
                  class="comment-box"
                  type="text"
                  placeholder="리뷰를 써 주세요."
                  cols="30"
                  rows="10"
                  maxlength="250"
                ></textarea>
                <div class="comment-button">
                  <button
                    type="button"
                    class="comment-btn"
                    onclick="backCommentList()"
                  >
                    취소
                  </button>
                  <button
                    type="button"
                    class="comment-btn"
                    onclick="getComment()"
                  >
                    등록
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- 리뷰 클릭이벤트 -->
    <script>
      const list = document.getElementById("list");
      const write = document.getElementById("write");

      // 별 체크
      // 라디오 버튼 요소들을 가져옴
      let star = 0;
      var radioButtons = document.querySelectorAll(
        'input[type="radio"][name="reviewStar"]'
      );
      // 라디오 버튼 변경 이벤트 핸들러 함수
      function handleRadioChange(event) {
        // 선택된 값 출력
        console.log("star value", event.target.value);
        star = event.target.value;
      }
      // 라디오 버튼에 이벤트 리스너 추가
      radioButtons.forEach(function (radioButton) {
        radioButton.addEventListener("change", handleRadioChange);
      });

      function changeComment() {
        list.style.display = "none";
        list.innerHTML = "";
        write.style.display = "flex";
      }

      // 리뷰 작성 취소
      let infoOpen = false;
      function backCommentList() {
        infoOpen = false;
        searchComment();
        list.style.display = "";
        write.style.display = "none";
      }

      // 리뷰 작성
      function getComment() {
        const form = document.forms["review"];
        const g_id = document.getElementById("galleryId");

        if (form.commentText.value.length == 0) {
          alert("리뷰를 입력해주세요.");
          form.commentText.focus();
          return false;
        }

        const data = {
          review: form.commentText.value,
          g_id: parseInt(g_id.innerText),
          star: parseInt(star),
        };

        infoOpen = false;
        axios({
          method: "post",
          url: "/gallery/comment",
          data: data,
        }).then((res) => {
          if (res.data.login == false) {
            alert("로그인 후 이용 가능합니다");
          }
          searchComment();
          form.commentText.value = "";
          list.style.display = "";
          write.style.display = "none";
        });
      }

      // 리뷰 조회
      function searchComment() {
        const g_id = document.getElementById("galleryId");

        let data = {
          g_id: parseInt(g_id.innerText),
        };

        if (list.innerHTML == "" && infoOpen == false) {
          infoOpen = true;
          axios({
            method: "post",
            url: "/gallery/commentfind",
            data: data,
          }).then((res) => {
            for (let data of res.data.result) {
              // console.log(data.u_id);

              let comStar = "";
              for (let i = 0; i < data.star; i++) {
                comStar += "⭐";
              }

              let newDiv = document.createElement("div");
              newDiv.innerHTML = `<div class="comment-list-text">
                <p>${data.u_id}</p>
                <p>${comStar}</p>
                </div>
                <p style="margin: 0 10px 0 10px">${data.review}</p>
                <hr />`;
              list.appendChild(newDiv);
            }
          });
        } else {
          list.innerHTML = "";
          infoOpen = false;
        }
      }
    </script>

    <script>
      let infoContainer = document.querySelector(".info-container");
      let container = document.querySelector(".container");
      let content = document.querySelector(".content");
      let currentMode = ""; // 현재 선택된 모드(a or b)를 저장

      // 사이드바 버튼을 토글
      function toggleSidebar(mode) {
        if (content.style.display === "none") {
          // 현재 content가 숨겨져 있다면
          $(".content").css("display", "block"); // .contetn를 block으로 하고,
          $(".content > div").css("display", "none"); // .content > div를 none으로 하고,
          $(".content-" + mode).css("display", "block"); // .content-(none)을 block으로 한다

          $(".info-container").css("right", "470px"); // 정보창을 우로 470px 이동
          $("#map").css("left", "450px"); // 지도를 우로 470px 이동

          console.log("1");

          currentMode = mode; // 현재 모드 업데이트
        } else {
          // 현재 content가 보여져 있다면
          // mode가 같으면, .content를 none으로 하고,
          // mode가 다르면, .content를 black, mode를 토글한다
          if (mode === "a") {
            $(".content").css("display", "block");
            $(".content-a").css("display", "block");
            $(".content-b").css("display", "none");
          } else if (mode === "b") {
            infoContainer.style.display = "none";

            $(".content").css("display", "block");
            $(".content-b").css("display", "block");
            $(".content-a").css("display", "none");
          }
        }
      }

      // 정보창을 토글
      function toggleInfoContainer() {
        if (infoContainer.style.display === "block") {
          // 정보창이 보여져 있다면
          infoContainer.style.display = "none";
          $("#map").css("left", "450px");
          $("#map").css("width", "2050px");

          console.log("infoContainer를 닫습니다 3");
        } else {
          if (content.style.display === "none") {
            // 정보창이 숨겨져 있고, content가 숨겨져 있다면
            infoContainer.style.display = "block";
            $(".info-container").css("transform", "translateX(60px)");
            $("#map").css("left", "470px");

            console.log("infoContainer를 엽니다 1");
          } else {
            infoContainer.style.display = "block";
            infoContainer.style.left = "470px";
            $("#map").css("left", "880px");
            $("#map").css("width", "1620px");
            console.log("infoContainer를 엽니다 4");
          }
        }
      }
    </script>
  </body>
</html>
